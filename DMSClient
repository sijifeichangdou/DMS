package dms;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.RandomAccessFile;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import util.IOUtil;
import util.LogData;
import util.LogRec;

public class DMSClient {
	private File logFile;
	private File textLogFile;
	private File lastPositionFile;
	private int batch;
	private File logRecFile;
	private File loginLogFile;
	private String serverHost;
	private int serverPort;
	DMSClient() throws Exception{	
		try {
			System.out.println("客户端正在初始化");
			Map<String,String> config =  IOUtil.loadConfig(new File("config.xml"));
			init(config);
			System.out.println("客户端初始化成功");
		} catch (Exception e) {
			System.out.println("客户端初始化失败");
			throw e;
		}
	}
	private void init(Map<String,String> config) throws Exception{
		try{
			this.logFile = new File(config.get("logfile"));
			this.textLogFile = new File(config.get("textlogfile"));
			this.lastPositionFile = new File(config.get("lastpositionfile"));
			this.batch = new Integer(config.get("batch"));
			this.logRecFile = new File(config.get("logrecfile"));
			this.loginLogFile = new File(config.get("loginlogfile"));
			this.serverHost = config.get("localhost");
			this.serverPort = new Integer(config.get("serverport"));
		}catch(Exception e){
			System.out.println("客户端属性初始化失败");
			e.printStackTrace();
			throw e;
		}
	}
	/**
	 * 判断是否还有日志可以解析
	 * @return
	 */
	private long hasLogs(){
		long lastPosition = 0;
		try{
			if(!lastPositionFile.exists()){
				return 0;
			}
			lastPosition = IOUtil.readLong(lastPositionFile);
		}catch(Exception e){
			e.printStackTrace();
		}
		return logFile.length() - lastPosition > 0 ? lastPosition : -1; 
	}
	/**
	 * 解析日志
	 * @return
	 */
	private boolean parseLogs(){
		RandomAccessFile raf = null;
		try{
		if(!logFile.exists()){
			System.out.println(logFile+"不存在");
			return false;
		}
		if(textLogFile.exists()){
			System.out.println(textLogFile+"已经存在");
			return true;
		}
		long lastPosition = hasLogs();
		if(lastPosition < 0){
			System.out.println("无多余日志可以解析");
			return false;
		}
		raf = new RandomAccessFile(logFile,"r");
		List<LogData> logs = new ArrayList<LogData>();
		for(int i = 0;i < batch;i++){
			if(logFile.length() - lastPosition < LogData.LOG_LENGTH){
				break;
			}
		raf.seek(lastPosition+LogData.USER_OFFSET);
		String user = IOUtil.readString(raf, LogData.USER_LENGTH);
		
		raf.seek(lastPosition+LogData.PID_OFFSET);
		int pid = raf.readInt();
		
		raf.seek(lastPosition+LogData.TYPE_OFFSET);
		short type = raf.readShort();
		
		raf.seek(lastPosition+LogData.TIME_OFFSET);
		int time = raf.readInt();
		
		raf.seek(lastPosition+LogData.HOST_OFFSET);
		String host = IOUtil.readString(raf, LogData.HOST_LENGTH);
		
		logs.add(new LogData(user,pid,type,time,host));
		lastPosition = raf.getFilePointer();
		}
		IOUtil.saveCollection(logs,textLogFile);
		IOUtil.saveLong(lastPosition, lastPositionFile);
		return true;
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			if(raf != null){
				try {
					raf.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return false;
	}
	/**
	 * 匹配日志
	 * @return
	 */
	private boolean matchLogs(){
		try{
			if(!textLogFile.exists()){
				System.out.println(textLogFile+"不存在");
				return false;
			}
			if(logRecFile.exists()){
				System.out.println(logRecFile+"已经存在");
				return true;
			}
			List<LogData> logs = IOUtil.loadLogData(textLogFile);
			List<LogRec> logRecs = new ArrayList<LogRec>();
			if(loginLogFile.exists()){
				logs.addAll(IOUtil.loadLogData(loginLogFile));
			}
			Map<String,LogData> login = new HashMap<String,LogData>();
			Map<String,LogData> logout = new HashMap<String,LogData>();
			for(LogData log : logs){
				String key = log.getUser() + log.getPid();
				if(log.getType() == LogData.TYPE_LOGIN){
					login.put(key, log);
				}
				if(log.getType() == LogData.TYPE_LOGOUT){
					logout.put(key, log);
				}
			}
			Set<String> out = logout.keySet();
			for(String key : out){
				if(login.containsKey(key)){
					logRecs.add(new LogRec(login.get(key),logout.get(key)));
					login.remove(key);
				}
			}
			IOUtil.saveCollection(logRecs, logRecFile);
			IOUtil.saveCollection(login.values(),loginLogFile);
			return true;
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			textLogFile.delete();
		}
		return false;
	}
	/**
	 * 向服务端发送日志
	 * @return
	 */
	private boolean sendLogs(){
		Socket socket = null;
		try{
			if(!logRecFile.exists()){
				System.out.println(logRecFile+"不存在");
				return false;
			}
			socket = new Socket(serverHost,serverPort);
			PrintWriter pw = new PrintWriter(
					new OutputStreamWriter(
							socket.getOutputStream()),true);			
			List<String> logRecs = IOUtil.loadLogRec(logRecFile);
			for(String logRec : logRecs){
				pw.println(logRec);
			}
			pw.println("OVER");
			
			BufferedReader br = new BufferedReader(
					new InputStreamReader(
							socket.getInputStream()));
			String str = br.readLine();
			if(str.equals("OK")){
				System.out.println("日志发送成功");
				return true;
			}else{
				System.out.println("日志发送失败");
				return false;
			}
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			logRecFile.delete();
			if(socket != null){
				try {
					socket.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return false;
	}
	private void start(){
		while(true){
			if(!parseLogs()) break;
			if(!matchLogs()) break;
			sendLogs();
		}
	}
	public static void main(String[] args) {
		try {
			DMSClient client = new DMSClient();
			System.out.println("客户端启动成功");
			client.start();
		} catch (Exception e) {
			System.out.println("客户端启动失败");
			e.printStackTrace();
		}
		
	}
}
